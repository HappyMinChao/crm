package com.atguigu.crm.handlers;

import java.util.Locale;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.atguigu.crm.services.UserService;
import com.atuigu.crm.entity.User;

@RequestMapping("/user")
@Controller
public class UserHandler {

	@Autowired
	private UserService userService;
	
	@Autowired
	private ResourceBundleMessageSource messageSource;
	
	/**
	 * 1. 在表单提交的情况下, 响应结果尽可能使用重定向技术. 因为可以避免表单的重复提交. 
	 * 2. 在使用重定向之后, request 中加入的 key-value 在页面上无法得到. 因为是两个请求. 
	 * 3. 在 SpringMVC 中可以有办法解决这个问题. 即在重定向时, 页面上也可以得到在 handler 中加入的 key-value
	 * 1). 在方法中使用 RedirectAttributes 类型的参数
	 * 2). 调用 RedirectAttributes 的 addFlashAttribute 方法加入 key-value
	 * 3). 响应的结果需要使用 SpringMVC 映射一下, 而不能直接重定向会目标页面. 
	 * YES: 
	 * return "redirect:/index";
	 * <mvc:view-controller path="/index" view-name="index"/>
	 * NO: return "redirect:/index.jsp";
	 * 
	 * 4. 错误消息可以放入到国际化资源文件中.
	 * 1). 在 SpringMVC 的配置文件中配置国际化资源文件. 即配置 org.springframework.context.support.ResourceBundleMessageSource bean
	 * 2). 在国际化资源文件中加入 key-value
	 * 3). 把 ResourceBundleMessageSource bean 注入到 Handler 中.
	 * 4). 调用 getMessage(String code, Object[] args, Locale locale) 方法获取国际化资源文件中的 value 值.
	 * code: 国际化资源文件中的 key
	 * args: 国际化资源文件中的占位符
	 * locale: Locale 对象. 可以直接在 handler 方法中加入该类型的参数
	 * 
	 * 5. 在 Handler 方法中使用 HttpSession 对象. 建议使用原生的 HttpSession 对象. 
	 */
	@RequestMapping(value="/login",method=RequestMethod.POST)
	public String login(@RequestParam(value="username", required=false) String username, 
			@RequestParam(value="password",required=false) String password,
			RedirectAttributes attributes, Locale locale, HttpSession session){
		User user = userService.login(username, password);
		if(user != null){
			//把用户信息保存到 HttpSession 中.
			session.setAttribute("user", user);
			return "success";
		}
		
		//登陆失败. 
		attributes.addFlashAttribute("message", messageSource.getMessage("error.user.login", null, locale));
		return "redirect:/index";
	}
	
}
