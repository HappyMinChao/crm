package com.atguigu.crm.handlers;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.WebUtils;

import com.atguigu.crm.services.SalesChanceService;
import com.atguigu.crm.services.UserService;
import com.atuigu.crm.entity.SalesChance;
import com.atuigu.crm.entity.User;
import com.atuigu.crm.orm.Page;

@RequestMapping("/chance")
@Controller
public class SalesChanceHandler {

	@Autowired
	private SalesChanceService salesChanceService;
	@Autowired
	private UserService userService;
	
	/**
	 *@Description:挑战到分配销售机会的页面
	 *@Author:du_minchao
	 *@Version:
	 *@CreateDate:29 Mar 2016
	 *@return:String
	 */
	@RequestMapping(value="/dispatch/{id}",method=RequestMethod.GET)
	public String dispatchPage(@PathVariable("id")Integer id, Map<String, Object> map){
		
		//查询出模型对象， 放在与对象中，跳转到修改页面
		SalesChance elementById = salesChanceService.getElementById(id);
		List<User> listUser = userService.getAllUser();
		map.put("chance", elementById);
		map.put("users", listUser);
		
		return "chance/dispatch";
	}

	@RequestMapping(value="/{id}",method=RequestMethod.PUT)
	public String update(@PathVariable("id") Long id, SalesChance chance, RedirectAttributes attributes){
		//为 id 赋值. 
		chance.setId(id);
		salesChanceService.update(chance);
		attributes.addFlashAttribute("message", "修改机会成功!");
		return "redirect:/chance/list";
	}
	
	@RequestMapping(value="/{id}",method=RequestMethod.GET)
	public String input(@PathVariable("id") Integer id, Map<String, Object> map){
		map.put("chance", salesChanceService.get(id)); 
		return "chance/input";
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.DELETE)
	public String delete(@PathVariable("id") Integer id, RedirectAttributes attributes){
		salesChanceService.delete(id);
		attributes.addFlashAttribute("message", "删除成功!");
		return "redirect:/chance/list";
	}
	
	@RequestMapping(value="/",method=RequestMethod.POST)
	public String save(SalesChance chance, RedirectAttributes attributes){
		salesChanceService.save(chance);
		attributes.addFlashAttribute("message", "新建销售机会成功!");
		return "redirect:/chance/list";
	}
	
	@RequestMapping(value="/",method=RequestMethod.GET)
	public String input(Map<String, Object> map){
		map.put("chance", new SalesChance());
		return "chance/input";
	}
	
	@RequestMapping("/list")
	public String list(HttpServletRequest request, 
			@RequestParam(value="pageNo",required=false) String pageNoStr, Map<String, Object> map){
		int pageNo = 1;
		try {
			pageNo = Integer.parseInt(pageNoStr);
		} catch (Exception e) {}
		
		//获取查询条件的请求参数对应的 Map
		Map<String, Object> params = WebUtils.getParametersStartingWith(request, "search_");
		
		//如何能保证在分页时可以携带查询条件. 
		//把查询条件的 params 转为查询的字符串
		String queryString = encodeParamsToQueryString(params);
		//把查询条件的字符串放入到 request 中
		map.put("queryString", queryString);
		
		Page<SalesChance> page = salesChanceService.getPage(pageNo, params);
		map.put("page", page);
		return "chance/list";
	}

	private String encodeParamsToQueryString(Map<String, Object> params) {
		StringBuilder queryString = new StringBuilder();
		
		if(params != null
				&& params.size() > 0){
			for(Map.Entry<String, Object> entry: params.entrySet()){
				String key = entry.getKey();
				Object val = entry.getValue();
				
				if("".equals(val)){
					continue;
				}
				
				queryString.append("search_")
				                  .append(key)
				                  .append("=")
				                  .append(val)
				                  .append("&");
			}
			
			if(queryString.length() > 0){
				queryString.replace(queryString.length() - 1, queryString.length(), "");
			}
		}
		
		return queryString.toString();
	}
	
	/**
	 *@Description:保存销售机会
	 *@Author:du_minchao
	 *@CreateDate:29 Mar 2016
	 *@return:String
	 */ 
	@RequestMapping(value="/dispatch",method=RequestMethod.PUT)
	public String dispatchSalesChance(@ModelAttribute("chance") SalesChance chance){
		//status=2、designee、designeeDate
		chance.setStatus(2);
		salesChanceService.updateDispatchSalesChance(chance);
		return "redirect:/chance/list";
	}
	
	@ModelAttribute
	public void preSalesChance(@RequestParam(value="id",required=false)Integer id,
								Map<String, Object> map){
		if(id != null){
			 map.put("chance", salesChanceService.getElementById(id));
		}
		
	}
	/**
	 * 客户开发成功----by 宁华勇
	 * @param id
	 * @param attributes
	 * @return
	 */
	@RequestMapping(value="/finish",method=RequestMethod.PUT)
	public String finish(@RequestParam("id") Integer id,RedirectAttributes attributes){
		salesChanceService.finish(id);
		attributes.addFlashAttribute("message", "客户开发成功");
		return "redirect:/plan/list";
	}
	/**
	 * 客户开发失败---by ning
	 * @param id
	 * @param attributes
	 * @return
	 */
	@RequestMapping(value="/stop",method=RequestMethod.PUT)
	public String stop(@RequestParam("id") Integer id,RedirectAttributes attributes){
		salesChanceService.stop(id);
		attributes.addFlashAttribute("message", "客户开发失败");
		return "redirect:/plan/list";
	}
	
	@RequestMapping(value="details")
	public String detail(@RequestParam("chanceId") Integer id,Map<String,Object> map){
		SalesChance chance = salesChanceService.get(id);
		map.put("chance", chance);
		return "plan/details";
	}
}
